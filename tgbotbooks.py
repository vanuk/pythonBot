import base64
import telebot
import mysql.connector
import requests
from telebot import types
from datetime import datetime
import os
import requests

TOKEN = '6568927019:AAH9cVz8nTewEZ59j0bdnNZMd_LdC77ERL4'

GITHUB_TOKEN = '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'
# –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ MySQL-—Å–µ—Ä–≤–µ—Ä–æ–º
db_config = {
    "host": "127.0.0.1",    
    "user": "root",    
    "password": "visspan01",   
    "database": "tg_bot_books"    
}

conn = mysql.connector.connect(**db_config)
cursor = conn.cursor()

bot = telebot.TeleBot(TOKEN)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –º–µ–Ω—é
menu_markup = types.ReplyKeyboardMarkup(row_width=3)

item1 = types.KeyboardButton('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–Ω–∏–≥–∏ üì•')
item2 = types.KeyboardButton('–ü–æ—à—É–∫ –∫–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä—É üîç')
item3 = types.KeyboardButton('–ü–æ—à—É–∫ –∫–Ω–∏–≥–∏ –∑–∞ –Ω–∞–∑–≤–æ—é üîç')
menu_markup.add(item1, item2, item3)

# —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∂–∞–Ω—Ä—ñ–≤
available_genres = ['–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–î—Ä–∞–º–∞', '–ü—Ä–∏–≥–æ–¥–∏', '–ö—Ä–∏–º—ñ–Ω–∞–ª', '–§–µ–Ω—Ç–µ–∑—ñ']

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:", reply_markup=menu_markup)

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    if message.text == '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–Ω–∏–≥–∏ üì•':
        bot.reply_to(message, "–í–∏–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏:", reply_markup=create_genre_keyboard())
        bot.register_next_step_handler(message, get_genre)
    elif message.text == '–ü–æ—à—É–∫ –∫–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä—É üîç':
        bot.reply_to(message, "–í–∏–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏:", reply_markup=create_genre_keyboard())
        bot.register_next_step_handler(message, find_books_by_genre)
    elif message.text == '–ü–æ—à—É–∫ –∫–Ω–∏–≥–∏ –∑–∞ –Ω–∞–∑–≤–æ—é üîç':
       chat_id = message.chat.id  # –û—Ç—Ä–∏–º—É—î–º–æ chat_id –∑ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
       bot.send_message(chat_id, '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏:')
       bot.register_next_step_handler(message, find_books_by_name)
    else:
        bot.reply_to(message, "–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à–æ–≥–æ –≤–∏–±–æ—Ä—É. –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é.")

def create_cancel_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item = types.KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")
    markup.add(item)
    return markup

def create_genre_keyboard():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    row1 = [types.KeyboardButton(genre) for genre in available_genres[:len(available_genres)//2]]
    row2 = [types.KeyboardButton(genre) for genre in available_genres[len(available_genres)//2:]]
    markup.add(*row1, *row2)
    return markup

def get_genre(message):
    genre = message.text
    user_id = message.from_user.id
    user_name = message.from_user.username
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item1 = types.KeyboardButton("—Å–∫–∞—Å—É–≤–∞—Ç–∏")
    markup.add( item1)
    
    bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, get_book_name, user_id, user_name, current_time, genre)

def get_book_name(message, user_id, user_name, current_time, genre):
    book_name = message.text
    
    if book_name.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:", reply_markup=menu_markup)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item3 = types.KeyboardButton("—Å–∫–∞—Å—É–≤–∞—Ç–∏")
    markup.add(item3) 
    
    bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –ø–µ—Ä—à—ñ –±—É–∫–≤–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, get_book_author, user_id, user_name, current_time, genre, book_name)

def get_book_author(message, user_id, user_name, current_time, genre, book_name):
    book_author = message.text
    
    if book_author.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:", reply_markup=menu_markup)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item1 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –æ–ø–∏—Å –∫–Ω–∏–≥–∏")
    item2 = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É")
    item3 = types.KeyboardButton("—Å–∫–∞—Å—É–≤–∞—Ç–∏")
    
    markup.add(item1, item2, item3)  
    
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –∫–Ω–∏–≥–∏ –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫:", reply_markup=markup)
    bot.register_next_step_handler(message, get_book_description, user_id, user_name, current_time, genre, book_name, book_author)

def get_book_description(message, user_id, user_name, current_time, genre, book_name, book_author):
    book_description = message.text
    if book_description.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:", reply_markup=menu_markup)
        return

    if book_description.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É":
        description = None
    else:
        description = book_description

    bot.reply_to(message, "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª –∫–Ω–∏–≥–∏:")
    bot.register_next_step_handler(message, save_file_to_db, user_id, user_name, current_time, genre, book_name, book_author, book_description)

def save_file_to_db(message, user_id, user_name, current_time, genre, book_name, book_author, book_description):
    if message.document:
        if message.document.mime_type == 'application/pdf':
            file_id = message.document.file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            file_extension = message.document.file_name.split('.')[-1]
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–ª—è—Ö—É –¥–ª—è —Ñ–∞–π–ª—É –Ω–∞ GitHub
            github_file_path = f"{'save'}/{book_name}.{file_extension}"

            # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –Ω–∞ GitHub
            file_link = upload_to_github(github_file_path, downloaded_file)

            if file_link:
                # –í—Å—Ç–∞–≤–∫–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–∞–π–ª –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö MySQL
                insert_query = "INSERT INTO saved_data (user_id, user_name, genre, name, description, author, link, time) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"
                data = (user_id, user_name, genre, book_name, book_description, book_author, file_link, current_time)

                try:
                    cursor.execute(insert_query, data)
                    conn.commit()
                    bot.reply_to(message, f"–ö–Ω–∏–≥—É '{book_name}' –∑ –∂–∞–Ω—Ä–æ–º '{genre}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–∞–π–ª: {file_link}")
                except mysql.connector.Error as err:
                    bot.reply_to(message, f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–Ω–∏–≥–∏: {err}")
            else:
                bot.reply_to(message, "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –Ω–∞ GitHub.")
        else:
            bot.reply_to(message, "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ PDF.")
    else:
        bot.reply_to(message, "–¶–µ –Ω–µ —î —Ñ–∞–π–ª–æ–º –∫–Ω–∏–≥–∏. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∫–Ω–∏–≥—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–∞–π–ª—É.")

    bot.send_message(user_id, "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:", reply_markup=menu_markup)

def upload_to_github(file_path, downloaded_file):
    try:
        url = f"https://api.github.com/repos/vanuk/tgbotbook/contents/{file_path}"
        headers = {
            "Authorization": f"Bearer {GITHUB_TOKEN}"
        }
        content_base64 = base64.b64encode(downloaded_file).decode()

        data = {
            "message": f"Add {file_path}",
            "content": content_base64
        }
        
        response = requests.put(url, headers=headers, json=data)

        if response.status_code == 201:
            return response.json()["content"]["download_url"]
        else:
            print(f"GitHub API Error: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"GitHub Upload Error: {e}")
        return None
    try:
        url = f"https://api.github.com/repos/vanuk/tgbotbook.git/contents/{book_name}/{file_path}"
        headers = {
            "Authorization": f"Bearer {GITHUB_TOKEN}"
        }
        data = {
            "message": f"Add {book_name}",
            "content": open(file_path, 'rb').read().encode('base64')
        }
        response = requests.put(url, headers=headers, json=data)

        if response.status_code == 201:
            return response.json()["content"]["download_url"]
        else:
            print(f"GitHub API Error: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"GitHub Upload Error: {e}")
        return None

def find_books_by_genre(message):
    genre = message.text

    search_query = "SELECT * FROM saved_data WHERE genre = %s"
    cursor.execute(search_query, (genre,))
    books = cursor.fetchall()

    if books:
        response = "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:\n"
        for book in books:
            response += f"–ñ–∞–Ω—Ä –∫–Ω–∏–≥–∏: {book[3]}\n–ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏: {book[4]}\n–ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏: {book[6]}\n–û–ø–∏—Å –∫–Ω–∏–≥–∏: {book[7]}\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–Ω–∏–≥–∏: {book[9]}\n"
        bot.reply_to(message, response)
    else:
        bot.reply_to(message, "–ö–Ω–∏–≥ –∑ —Ü–∏–º –∂–∞–Ω—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:", reply_markup=menu_markup)

def find_books_by_name(message):
    book_name = message.text
    
    search_query = "SELECT * FROM saved_data WHERE name = %s"
    
    cursor.execute(search_query, (book_name,))
    books = cursor.fetchall()
    
    if books:
        response = "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É: \n"
        for book in books:
             response += f"–ñ–∞–Ω—Ä –∫–Ω–∏–≥–∏: {book[3]}\n–ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏: {book[4]}\n–ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏: {book[6]}\n–û–ø–∏—Å –∫–Ω–∏–≥–∏: {book[7]}\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–Ω–∏–≥–∏: {book[9]}\n"
        bot.reply_to(message, response)
    else:
        bot.reply_to(message, "–ö–Ω–∏–≥–∏ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:", reply_markup=menu_markup)

if __name__ == '__main__':
    bot.polling()  